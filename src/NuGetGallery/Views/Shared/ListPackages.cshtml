@model PackageListViewModel
@{
    ViewBag.Title = String.IsNullOrWhiteSpace(Model.SearchTerm) ? "Packages" : "Packages matching " + Model.SearchTerm;
    ViewBag.SortText = String.IsNullOrWhiteSpace(Model.SearchTerm) ? "recent installs" : "relevance";
    ViewBag.Tab = "Packages";
    ViewBag.BlockSearchEngineIndexing = !String.IsNullOrWhiteSpace(Model.SearchTerm) || Model.PageIndex != 0;
}

<section role="main" class="container main-container page-list-packages">
    <div class="row-heading clearfix">
        <div class="cell-heading">
            <h1 role="alert">
                <div class="dispay-redirect" style="display:block">
                    Downloaded this package! Wait for downloading package's dependencies or &nbsp
                    <br />
                    <button url="" id="redirect-to-package-button">Redirect to package page!</button>
                </div>
                @if (Model.TotalCount == 0)
                {
                    if (Model.PackageToDownloads.Exist)
                    {@*Click here to download*@
                    <div>Package found in publish registry but not availble in local registry, click below to download</div>
                    
                    <div name="download-package" 
                         id="click-to-download" 
                         style="cursor:pointer; 
                                color: blue">@Model.SearchTerm</div>
                }
                else
                {
                    <div>Package doesn't exist anywhere!</div>
                }
            }

                @if (String.IsNullOrEmpty(Model.SearchTerm))
                {
                    if (Model.TotalCount == 1)
                    {
                        <text>There is 1 package</text>
                    }
                    else
                    {
                        <text>There are @Model.TotalCount.ToNuGetNumberString() packages</text>
                    }
                }
                else
                {
                    if (Model.TotalCount == 1)
                    {
                        <text>1 package </text>
                    }
                    else
                    {
                        <text>@Model.TotalCount.ToNuGetNumberString() packages </text>
                    }

                    <text>returned for @Html.BreakWord(Model.SearchTerm)</text>
                }
            </h1>
            <h2>
                
            </h2>
        </div>
        <div class="cell-controls">
            <a href="?q=@Model.SearchTerm@(Model.IncludePrerelease ? "&prerel=false" : "")">@(Model.IncludePrerelease ? "Hide" : "Show") prerelease</a>
        </div>
        
    </div>

    @if (!Model.Items.Any())
    {
        <div class="row">
            <div class="col-xs-12 clearfix">
                <div class="panel panel-default" aria-expanded="true" >
                    <div class="panel-body">
                        NuGet package search works the same on nuget.org, from the NuGet CLI, and within the NuGet Package Manager extension in Visual Studio. <br />
                        Check out our <strong><a href="https://docs.microsoft.com/nuget/consume-packages/finding-and-choosing-packages#search-syntax">Search Syntax</a></strong>.
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="list-packages" role="list">
        @{
            var itemIndex = Model.PageIndex * Model.PageSize;
            var eventName = Model.IsPreviewSearch ? "preview-search-selection" : "search-selection";
        }
        @foreach (var package in Model.Items)
        {
            @Html.Partial("_ListPackage", package, new ViewDataDictionary { { "itemIndex", itemIndex }, { "eventName", eventName } })
            itemIndex++;
        }
    </div>

    <div class="row">
        <div class="col-xs-12 clearfix">
            @ViewHelpers.PreviousNextPager(Model.Pager)
        </div>
    </div>
    <div id="suggest-field" style="display:none">
        <text>You mean  </text><br />
        <ul id="suggestion"></ul>
    </div>
</section>

@section bottomScripts {
<script type="text/javascript">
        // Used to track how long the user waited before clicking a search selection.
        var pageLoadTime = Date.now();

        // Used to track how many selections were made on this page. Multiple selections can happen if the user opens
        // a search selection in a new tab, instead of navigating away from this page.
        var sincePageLoadCount = 0;
        @{
            var searchId = Guid.NewGuid().ToString();
            var category = Model.IsPreviewSearch ? "preview-search-page" : "search-page";
            var action = Model.IncludePrerelease ? "search-prerel" : "search-stable";

            // Emit an event representing the search page and the page index. This make it easier for the search selection
            // event to be correlated in Google Analytics.
            <text>
            window.nuget.sendAnalyticsEvent('@category', '@action', @Html.Raw(Json.Encode(Model.SearchTerm)), @Model.PageIndex);
            window.nuget.sendAiMetric('BrowserSearchPage', @Model.PageIndex, {
                SearchId: '@searchId',
                SearchTerm: @Html.Raw(Json.Encode(Model.SearchTerm)),
                IncludePrerelease: '@Model.IncludePrerelease',
                PageIndex: @Model.PageIndex,
                TotalCount: @Model.TotalCount,
                IsPreviewSearch: '@Model.IsPreviewSearch'
            });
            </text>
        }

    var global_checkIfPackageClickToDownloaded = false;
    var global_NamePackageClickedToDownloaded = '';
    $(document).ready(function () {
        
        //for (var i = 0; i < 10; i++) {
        //    setTimeout(callIfPackageDownloaded(), 2000);
        //}

    })
    $('#redirect-to-package-button').click(function () {
        let url = $(this).attr('url');
        if (url) {
            window.location.href = 'packages' + global_NamePackageClickedToDownloaded;
        }
        else {
            $.ajax({
                method: 'GET',
                url: "test-package/" + global_NamePackageClickedToDownloaded
            })
                .done(function (res) {
                    if (res === "Found") {
                        $(this).attr('url', 'packages/' + global_NamePackageClickedToDownloaded);
                    }
                    else if (res === 'NotFound') {
                        console.log("NotFound test");
                        setTimeout($('#redirect-to-package-button').trigger('click'), 9000);
                    }
                })
                .fail(function () {
                    console.log("fail test");
                    setTimeout($('#redirect-to-package-button').trigger('click'), 9000);
                })

        }
    })
        function callIfPackageDownloaded() {
            $.ajax({
                method: "get",
                url: "test-package/" + global_NamePackageClickedToDownloaded,
                success: function (res) {
                    if (res === "Found") {
                        alert(res + "success 1");
                        //window.location.href = "/packages/" + pack;
                    }

                    else {  
                       
                    }
                }
            })
        }

        function callDownloadNuget(element) {
            $(element).on("click", function () {
                //var packageInfo = document.getElementById("click-to-download").getAttribute("package-name");
                //var packageInfo = $("#click-to-download").attr("name").trim();
                var packageInfo = $(this).html().trim();
                var hasSpace = false;
                for (var i = 0; i < packageInfo.length; i++) {
                    if (packageInfo[i] === ' ') {
                        hasSpace = true;
                        break;
                    }
                }
                var request;
                if (hasSpace) {
                    var packageObj = packageInfo.split(' ');
                    global_NamePackageClickedToDownloaded = packageObj[0];
                    global_checkIfPackageClickToDownloaded = true;              
                    request = JSON.stringify({ Id: packageObj[0], Version: packageObj[1] });
                }
                else {
                    global_NamePackageClickedToDownloaded = packageInfo;
                    global_checkIfPackageClickToDownloaded = true; 
                    request = JSON.stringify({ Id: packageInfo, Version: "" });
                }
                //$('#redirect-to-package-button').trigger('click');
                console.log(request + "     " + global_checkIfPackageClickToDownloaded);
                $.ajax({
                    method: "post",
                    url: "packages/downloadbyinput",
                    contentType: "application/json",
                    data: request,
                    success: function (data) {
                        console.log(data);
                        if (data.location) {
                            alert(data.location + "success 2");
                            //window.location.href = data.location;
                        }
                    },
                    error: function (error, data, xhr) {
                        console.log(error);
                        console.log(data);
                        console.log(xhr);
                        let pack = '';
                        if (hasSpace) {
                            pack = packageInfo.split(' ')[0];
                        }
                        else {
                            pack = packageInfo;
                        }
                        $.ajax({
                            method: "get",
                            url: "test-package/" + pack,
                            success: function (res) {
                                if (res === "Found") {
                                    alert(res + "error2");
                                    //window.location.href = "/packages/"+pack;
                                }
                                else {
                                    alert("Error when download! Please try again");
                                }
                            }
                        })
                    }

                });
            });
        }

        callDownloadNuget("[name='download-package']");

    $(document).ready(function () {
        var viewModelEncode = @Html.Raw(Json.Encode(Model));
        console.log(viewModelEncode);
        if (viewModelEncode.NeedSuggestion === "Yes") {
            $("#suggest-field").css("display", "block");
            $.ajax({
                method: "get",
                url: "https://api-v2v3search-0.nuget.org/autocomplete?q="+"@Model.SearchTerm.ToString()"+"&prerelease=true",
                success: function (data, status, xhr) {
                    console.log(data);
                    console.log(status);
                    console.log(xhr);
                    let suggestPackage = data.data;
                    for (var i = 0; i < suggestPackage.length; i++) {
                        $("#suggestion").append("<li style='cursor:pointer; color:blue;' name='suggest-package'>" + suggestPackage[i] + "</li>");
                        //callDownloadNuget("[name='suggest-package']");
                    }
                    callDownloadNuget("[name='suggest-package']");
                },
                error: function (error) {
                    alert(error);
                }

            });
                
            }
        });



        $(function () {
            var emitAiClickEvent = function () {
                if (!window.nuget.isAiAvailable()) {
                    return;
                }

                var $this = $(this);
                var data = $this.data();
                if ($this.attr('href') && data.track) {
                    window.nuget.sendAiMetric('BrowserSearchSelection', data.trackValue, {
                        SearchId: '@searchId',
                        SearchTerm: @Html.Raw(Json.Encode(Model.SearchTerm)),
                        IncludePrerelease: '@Model.IncludePrerelease',
                        PageIndex: @Model.PageIndex,
                        TotalCount: @Model.TotalCount,
                        ClickIndex: data.trackValue,
                        PackageId: data.packageId,
                        PackageVersion: data.packageVersion,
                        UseVersion: data.useVersion,
                        SincePageLoadMs: Date.now() - pageLoadTime,
                        SincePageLoadCount: sincePageLoadCount,
                        IsPreviewSearch: '@Model.IsPreviewSearch'
                    });

                    sincePageLoadCount++;
                }
            };
            $.each($('a[data-track]'), function () {
                $(this).on('mouseup', function (e) {
                    if (e.which === 2) { // Middle-mouse click
                        emitAiClickEvent.call(this, e);
                    }
                });
                $(this).on('click', function (e) {
                    emitAiClickEvent.call(this, e);
                });
            });
        });
</script>
}
